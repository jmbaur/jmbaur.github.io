<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Jared Baur</title>
		<link>https://jmbaur.github.io/</link>
		<description>Recent content on Jared Baur</description>
		<generator>Hugo 0.76.3 -- gohugo.io</generator>
		<language>en</language>
		<lastBuildDate>Tue, 14 Apr 2020 15:06:42 -0700</lastBuildDate>
		<atom:link href="https://jmbaur.github.io/index.xml" rel="self" type="application/rss+xml" />
		<item>
			<title>About</title>
			<link>https://jmbaur.github.io/about/</link>
			<pubDate>Sat, 02 May 2020 18:11:58 -0700</pubDate>
			<guid isPermaLink="true">https://jmbaur.github.io/about/</guid>
			<description>&lt;figure&gt;
    &lt;img src=&#34;https://jmbaur.github.io/img/profile_small.png&#34;
         alt=&#34;me&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;I am a software engineer currently living in Tempe, AZ. Technology wise, I am passionate about open source, Unix/Linux, and the web! Outside of that, I enjoy working out and listening to &lt;a href=&#34;https://whosampled.com&#34;&gt;good music&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Feel free to contact me here: &lt;a href=&#34;mailto:jaredbaur@fastmail.com&#34;&gt;jaredbaur@fastmail.com&lt;/a&gt;&lt;/p&gt;
</description>
		</item>
		<item>
			<title>Working with websockets</title>
			<link>https://jmbaur.github.io/posts/colorizer/</link>
			<pubDate>Tue, 14 Apr 2020 15:06:42 -0700</pubDate>
			<guid isPermaLink="true">https://jmbaur.github.io/posts/colorizer/</guid>
			<description>&lt;p&gt;&lt;strong&gt;Hosted at &lt;a href=&#34;http://colorizer.io&#34;&gt;http://colorizer.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was a collaborative project that I completed at DevMountain with my partner Pablo Miranda! We made a drawing web app that you can use with your friends to make fun pieces of art! The project implements React on the front-end, Node.js (express) and Mongoose (MongoDB) on the backend, and Socket.io linking the two together to give the collaborative experience.&lt;/p&gt;
&lt;h1 id=&#34;landing&#34;&gt;Landing&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://jmbaur.github.io/img/colorizer/landing.gif&#34; alt=&#34;landing page&#34;&gt;&lt;/p&gt;
&lt;p&gt;The landing page consists of some pretty great CSS if I do say so myself. Behind the pretty is a simple way to get started using the app. There is no registration or logging in, just use it when you need to&amp;hellip;&lt;em&gt;easy, simple, nice&lt;/em&gt;. You enter your name and choose whether you want to create a new room or enter an existing one.&lt;/p&gt;
&lt;p&gt;On the back-end, if the user is going to a new room, their session is updated with a random room generated from a cool npm package called &lt;code&gt;human-readable-ids&lt;/code&gt;. The method &lt;code&gt;hri.random()&lt;/code&gt; generates a fun, unique room name in the form of &amp;ldquo;adjective-animal-number&amp;rdquo; (for example, &amp;ldquo;cool-frog-23&amp;rdquo;). This allows for the user to easily share the room name with a friend.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;module.exports: {
  setUser: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;async&lt;/span&gt; (req, res) =&amp;gt; {
    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// set user session
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    req.session.user = {
      color: randColor(),
      thickness: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,
      name: req.body.name,
      id: req.session.id
    };
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (req.body.newRoom) {
      req.session.user.room = hri.random();
    } &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
      req.session.user.room = req.body.room;
    }

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// add user to database if does not exist, change user if does exist
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; { id, name, color, thickness, room } = req.session.user;

    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; existingUser = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;await&lt;/span&gt; Users.findOne({ id: id });
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (!existingUser) {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; newUser = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt; Users({ id, name, color, thickness, room });
      newUser.save();
    } &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
      existingUser = req.session.user;
      existingUser.save();
    }

    &lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// send user session back
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;    res.status(&lt;span style=&#34;color:#3677a9&#34;&gt;200&lt;/span&gt;).send(req.session.user);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Users&lt;/code&gt; collection comes from a MongoDB model, written with Mongoose. Each user has the following attributes: id, name, room, color, and thickness; the later two for the user&amp;rsquo;s drawing implement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; mongoose = require(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mongoose&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; UserSchema = mongoose.Schema({
  id: { type: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;, unique: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt; },
  name: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  room: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  color: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  thickness: &lt;span style=&#34;color:#24909d&#34;&gt;Number&lt;/span&gt;
});

module.exports = mongoose.model(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;, UserSchema);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After the user is either entered into a new room or existing room, they are shown the canvas page. All there is to see is a toolbar for choosing settings and viewing other users as well as a blank canvas for drawing! The basic functionality is the user can draw on the canvas, change the color or thickness of the drawing implement, change his/her name within the room, see others within the same room, clear the canvas, and download the canvas drawing as a png file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://jmbaur.github.io/img/colorizer/canvas.png&#34; alt=&#34;canvas page&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the user draws on the canvas, the coordinates of the mouse are collected into a single &amp;ldquo;line&amp;rdquo; array and sent to the database as the &lt;code&gt;Lines&lt;/code&gt; collection, its model shown below. Each time the drawing is updated with a new line, the database is queried for the current room, and the lines array in the model is appended with the new line. This is the power of NoSQL at work; if we chose to implement an SQL database, each point in every line would need it&amp;rsquo;s own row in the database, causing a much more complicated way to query the database for drawing info. Like this, we can query for all lines in a room and update the canvas on the client side when needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;ï¿¼&lt;/span&gt;
&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; mongoose = require(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;mongoose&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; LineSchema = mongoose.Schema({
  id: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  name: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  room: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
  lines: [
    {
      points: [
        {
          x: &lt;span style=&#34;color:#24909d&#34;&gt;Number&lt;/span&gt;,
          y: &lt;span style=&#34;color:#24909d&#34;&gt;Number&lt;/span&gt;
        }
      ],
      color: &lt;span style=&#34;color:#24909d&#34;&gt;String&lt;/span&gt;,
      thickness: &lt;span style=&#34;color:#24909d&#34;&gt;Number&lt;/span&gt;
    }
  ]
});

module.exports = mongoose.model(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;lines&amp;#34;&lt;/span&gt;, LineSchema);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Appending lines to the database incredibly easy thanks to Mongoose. It&amp;rsquo;s as simple as querying the database for the equivalent room and user and using &lt;code&gt;Array.prototype.push()&lt;/code&gt; on the line array. Mongoose just makes database manipulation feel so native to JavaScript.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;module.exports = {
  addLine: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;async&lt;/span&gt; (req, res) =&amp;gt; {
    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; existingLineCollection = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;await&lt;/span&gt; Lines.findOne({
      name: req.body.name,
      id: req.body.id,
      room: req.body.room
    });

    &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; (existingLineCollection) {
      existingLineCollection.lines.push(req.body.line);
      existingLineCollection.save();
    } &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
      &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;const&lt;/span&gt; newLineCollection = &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;new&lt;/span&gt; Lines({
	id: req.body.id,
	name: req.body.name,
	room: req.body.room,
	lines: [req.body.line]
      });
      newLineCollection.save();
    }

    res.sendStatus(&lt;span style=&#34;color:#3677a9&#34;&gt;200&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
		</item>
		<item>
			<title>Writing a backend API in Golang</title>
			<link>https://jmbaur.github.io/posts/mood-tracker/</link>
			<pubDate>Thu, 12 Mar 2020 15:22:01 -0700</pubDate>
			<guid isPermaLink="true">https://jmbaur.github.io/posts/mood-tracker/</guid>
			<description>&lt;p&gt;Recently I developed a web app for mood tracking (check it out &lt;a href=&#34;https://dailymoodtracker.com&#34;&gt;here&lt;/a&gt;), and I wrote the backend using the Gin framework in Golang! The &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;Gin&lt;/a&gt; framework was super easy to get started with and provides a good amount of extensibility for using sessions, middlewares, and more.&lt;/p&gt;
&lt;h3 id=&#34;basic-router&#34;&gt;Basic Router&lt;/h3&gt;
&lt;p&gt;A basic server with a few endpoints can be written with just a few lines of code. Within this block, a session store is initialized, along with common session options, so that user sessions can persist on the front-end. All middleware used by the router are implemented by &lt;code&gt;router.Use()&lt;/code&gt;. Each route is specified with its CRUD verb (get, post, put, patch, &amp;hellip;) and passing in the path to the endpoint along with the handler for the request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;github.com/gin-contrib/sessions&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;main&lt;/span&gt;() {
	router := gin.&lt;span style=&#34;color:#447fcf&#34;&gt;Default&lt;/span&gt;()

	store := cookie.&lt;span style=&#34;color:#447fcf&#34;&gt;NewStore&lt;/span&gt;([]&lt;span style=&#34;color:#24909d&#34;&gt;byte&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;sessionKey&amp;#34;&lt;/span&gt;))
	store.&lt;span style=&#34;color:#447fcf&#34;&gt;Options&lt;/span&gt;(sessions.Options{SameSite: http.SameSiteLaxMode, Path: &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, HttpOnly: &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;true&lt;/span&gt;})

	router.&lt;span style=&#34;color:#447fcf&#34;&gt;Use&lt;/span&gt;(sessions.&lt;span style=&#34;color:#447fcf&#34;&gt;Sessions&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;session&amp;#34;&lt;/span&gt;, store))

	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// endpoints
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;	router.&lt;span style=&#34;color:#447fcf&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;, Register)
	router.&lt;span style=&#34;color:#447fcf&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;, Login)
	router.&lt;span style=&#34;color:#447fcf&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/logout&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#447fcf&#34;&gt;AuthRequired&lt;/span&gt;(), Logout)

	router.&lt;span style=&#34;color:#447fcf&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;:8000&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handler-functions&#34;&gt;Handler Functions&lt;/h3&gt;
&lt;p&gt;A handler function for an endpoint handles all the business logic. For example, in a login handler, we would take some values from the request body, use them to contact the database, compare the hashed password, and send the appropriate response to the client. The request body can be translated into a Golang struct by specifying the JSON names to each value in the struct (I found this &lt;a href=&#34;https://mholt.github.io/json-to-go/&#34;&gt;JSON to Golang converter&lt;/a&gt; to be extremely helpful). The method &lt;code&gt;c.ShouldBindJSON&lt;/code&gt; as well as &lt;code&gt;c.BindJSON&lt;/code&gt; will attempt to bind the request body to the struct, returning an error if the JSON could not be bound. This will happen if the specified JSON names in the struct do not match the request body&amp;rsquo;s names, or if a value is missing from the body (when &lt;code&gt;binding:&amp;quot;required&amp;quot;&lt;/code&gt; is specified in the struct).&lt;/p&gt;
&lt;p&gt;Assuming the client has been validated successfully, you can save info to their session by using &lt;code&gt;session.Set()&lt;/code&gt;, which takes in a key and value. In future requests, you can use &lt;code&gt;session.Get()&lt;/code&gt; and pass in the expected key in order to get whatever info was set. If you do &lt;strong&gt;not&lt;/strong&gt; perform &lt;code&gt;session.Save()&lt;/code&gt;, the key-value pair will not be saved to their session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;type&lt;/span&gt; Person &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;struct&lt;/span&gt; {
	Username &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;`json:&amp;#34;username&amp;#34;, binding:&amp;#34;required&amp;#34;`&lt;/span&gt;
	Password &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#ed9d13&#34;&gt;`json:&amp;#34;password&amp;#34;, binding:&amp;#34;required&amp;#34;`&lt;/span&gt;
}

&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;Login&lt;/span&gt;(c *gin.Context) {
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;var&lt;/span&gt; person Person
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; err := c.&lt;span style=&#34;color:#447fcf&#34;&gt;ShouldBindJSON&lt;/span&gt;(&amp;amp;person); err != &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		c.&lt;span style=&#34;color:#447fcf&#34;&gt;JSON&lt;/span&gt;(http.StatusBadRequest, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Could not parse JSON&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt;
	}

	&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;// Contact DB for relevant user and check if hashed password matches
&lt;/span&gt;&lt;span style=&#34;color:#999;font-style:italic&#34;&gt;&lt;/span&gt;
	session := sessions.&lt;span style=&#34;color:#447fcf&#34;&gt;Default&lt;/span&gt;(c)
	session.&lt;span style=&#34;color:#447fcf&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;, id)
	session.&lt;span style=&#34;color:#447fcf&#34;&gt;Save&lt;/span&gt;()

	c.&lt;span style=&#34;color:#447fcf&#34;&gt;JSON&lt;/span&gt;(http.StatusOK, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;Logged in&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;custom-middleware&#34;&gt;Custom Middleware&lt;/h3&gt;
&lt;p&gt;Writing middleware with gin is fairly straight forward. I wrote a custom authorization function that I use for endpoints that send user information back to the client, thus first requiring the user to have a user session (i.e. be logged in). Middleware functions can be written similarly to handler functions, it will return a function that receives &lt;code&gt;c *gin.Context&lt;/code&gt; and using that to obtain information about the request. The objective of this piece of middleware is to check whether there is an existing user session for a given request and set a variable for the handler function to use. If the certain key cannot be obtained from the session, the request is aborted and the handler function is never reached.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#447fcf&#34;&gt;AuthRequired&lt;/span&gt;() gin.HandlerFunc {
	&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;func&lt;/span&gt;(c *gin.Context) {
                session := sessions.&lt;span style=&#34;color:#447fcf&#34;&gt;Default&lt;/span&gt;(c)
                userId := session.&lt;span style=&#34;color:#447fcf&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;)
		&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;if&lt;/span&gt; userId == &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
                        c.&lt;span style=&#34;color:#447fcf&#34;&gt;Abort&lt;/span&gt;()
                        c.&lt;span style=&#34;color:#447fcf&#34;&gt;JSON&lt;/span&gt;(http.StatusUnauthorized, &lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;User not logged in&amp;#34;&lt;/span&gt;)
		} &lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                        c.&lt;span style=&#34;color:#447fcf&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;userId&amp;#34;&lt;/span&gt;, userId.(&lt;span style=&#34;color:#6ab825;font-weight:bold&#34;&gt;string&lt;/span&gt;))
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the middleware can be done on a per route basis or as a group. To use, invoke the middleware function on the route/group.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;router.&lt;span style=&#34;color:#447fcf&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/logout&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#447fcf&#34;&gt;AuthRequired&lt;/span&gt;(), HandlerFunc)

assets := router.&lt;span style=&#34;color:#447fcf&#34;&gt;Group&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;assets&amp;#34;&lt;/span&gt;)
assets.&lt;span style=&#34;color:#447fcf&#34;&gt;Use&lt;/span&gt;(&lt;span style=&#34;color:#447fcf&#34;&gt;AuthRequired&lt;/span&gt;())
{
	assets.&lt;span style=&#34;color:#447fcf&#34;&gt;GET&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/assets&amp;#34;&lt;/span&gt;, GetAssets)
	assets.&lt;span style=&#34;color:#447fcf&#34;&gt;POST&lt;/span&gt;(&lt;span style=&#34;color:#ed9d13&#34;&gt;&amp;#34;/assets&amp;#34;&lt;/span&gt;, PostAssets)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://jmbaur.github.io/img/gin-api/gopher.png&#34; alt=&#34;Golang Gopher&#34;&gt;&lt;/p&gt;
</description>
		</item>
	</channel>
</rss>
